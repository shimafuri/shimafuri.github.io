{"version":3,"sources":["webpack:///src/App.vue","webpack:///./src/App.vue?760e","webpack:///./src/App.vue","webpack:///./src/main.js"],"names":["global","normalizedScale","originalScale","v","pitchClass","normalizedPitchClass","retval","chromaticInterval","normalizedRootPitchClass","pitch","position","getPageXY","element","clientLeft","clientTop","offsetParent","yPosition","App","random","oldVal","i","pitches","_iteratorNormalCompletion","_step","value","duration","totalDuration","$forceUpdate","this","playingOffset","_iteratorNormalCompletion2","scale","playingScale","tempOffset","unit","stopPropagation","preventDefault","_this","selectedNote","_this2","files","toLocaleDateString","FileReader","event","result","getFormat","getTrackContent","midiEvent","delta","type","subtype","param1","push","channel","onTime","tick","midiNotes","file","scrollLeftAtLatestScrollEvent","$refs","notesPane","$event","target","scrollLeft","scrollTopAtLatestScrollEvent","scrollTop","headerPane","pitchesPane","baseScaleInterval","scaleIntervals","apply","targetArray","baseScaleIntervalIndex","concat","toConsumableArray_default","divideScaleInterval","localOffset","rerender","baseChordInterval","chordIntervals","baseChordIntervalIndex","divideChordInterval","centralTone","newNote","scaleA","scaleB","_i","targetIndex","_divideChordInterval","boundaryOffset","targetChordInterval","chord","newChordIntervalA","newChordIntervalB","_i2","newScaleIntervalB","chordA","chordB","note","_this3","then","ma","e","values","midiInputs","midiOutputs","catch","reload","_this4","checked","input","name","str","transposeDistance","isNoteOn","newVal","template","_this5","newNoteLocalOffset","granularity","pageX","onMouseMove","_onMouseUp","_this6","_onMouseUp2","_len","arguments","length","args","Array","_key","_this7","newIntervalLocalOffset","_onMouseUp3","newIntervalDuration","log","_this8","_onMouseUp4","selectortype_template_index_0_src_App","render","_vm","_h","$createElement","_c","_self","class","flag-collapse","flagCollapse","staticStyle","width","height","background-color","display","flex-flow","attrs","id","on","dragover","onDragOver","drop","onDrop","wheel","onWheel","_m","_v","top","right","bottom","left","flex","align-items","color","font-size","midiAccess","selectedMidiInputs","_l","_s","ref","channels","map","join","padding","click","startMidiInputConfiguration","disconnectMidiInput","_e","background-image","pointer-events","margin","border","tabindex","keyup","keyCode","onBackSpace","onDelete","staticClass","margin-right","overflow","scroll","onScroll_headerPane","style","barWidth","border-bottom","mouseup","onMouseUp_BeatsBar","divideDuration","beat","key","int","scale-interval","new-scale-interval","onNewScaleInterval","new-chord-interval","onNewChordInterval","margin-bottom","onScroll_pitchesPane","pitchHeight","piano-key","scale-tone","includes","non-scale-tone","note-on","box-shadow","onScroll_notesPane","box-sizing","chd","pitch-row-wrapper","central-tone","root-tone","transform","getPositionInCollapseMode","transform-style","chord-interval","selected-notes","selectedNotes","new-note","onNewNote","index","margin-top","ch","margin-left","change","onMidiInputChannelToggled","staticRenderFns","justify-content","src_App","__webpack_require__","normalizeComponent","ssrContext","vue_esm","config","productionTip","use","dist_default","a","window","File","FileList","Blob","el","components","alert"],"mappings":"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","file":"static/js/app.5bc56c1266afee5fad96.js","sourcesContent":["<template>\n  <div id=\"app\"\n    :class=\"{\n      'flag-collapse': flagCollapse,\n    }\"\n    style=\"width: 100%; height: 100%; background-color: rgb(28, 28, 28); display: flex; flex-flow: column nowrap;\"\n    @dragover=\"onDragOver($event)\"\n    @drop=\"onDrop($event)\"\n    @wheel=\"onWheel\">\n    <!-- Logo and Menu part -->\n    <div style=\"height: 32px; position: relative;\">\n      <!-- Content wrapper -->\n      <div style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; background-color: rgb(58, 58, 58); display: flex; flex-flow: row nowrap;\">\n        <!-- Logo part -->\n        <div style=\"width: 100px; background-color: rgb(40, 40, 40);\"></div>\n        <!-- Menu part -->\n        <div style=\"flex: 1; width: 0; background-color: transparent;\"></div>\n      </div>\n      <!-- Content wrapper border -->\n      <div style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; background-image: linear-gradient(to top, black 0px, black 1px, transparent 1px, transparent 100%); pointer-events: none;\"></div>\n    </div>\n    <!-- Tool bar part -->\n    <div style=\"height: 32px; position: relative;\">\n      <!-- Content wrapper -->\n      <div style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; background-color: rgb(94, 101, 108); display: flex; flex-flow: row nowrap;\">\n        <div style=\"flex: 1; width: 0; background-color: transparent; display: flex; flex-flow: row nowrap; align-items: center; color: white; font-size: 12px;\">\n          <span style=\"display: inline-block; width: 10px;\"></span>\n          <span style=\"display: inline-block;\">MIDI Input:</span>          \n          <span style=\"display: inline-block; width: 10px;\"></span>\n          <template v-if=\"midiAccess != null\">\n            <template v-if=\"selectedMidiInputs != null && selectedMidiInputs.length > 0\">\n              <template v-for=\"input in selectedMidiInputs\">\n                {{input.ref.name}}\n                ({{input.channels.map(v => `CH${v}`).join(', ')}})\n              </template>\n            </template>\n            <template v-else>\n              &lt;Connected (No device is selected)&gt;\n            </template>\n          </template>\n          <template v-else>\n            &lt;Not connected&gt;\n          </template>\n          <span style=\"display: inline-block; width: 10px;\"></span>\n          <span style=\"display: inline-block; height: 20px; padding: 0 4px; background-color: rgba(255, 255, 255, 0.3);\"\n                @click=\"startMidiInputConfiguration\">\n            <div style=\"width: 100%; height: 100%; display: flex; flex-flow: row nowrap; align-items: center;\">\n              Configure\n            </div>\n          </span>\n          <template v-if=\"midiAccess != null\">\n            <span style=\"display: inline-block; width: 10px;\"></span>\n            <span style=\"display: inline-block; height: 20px; padding: 0 4px; background-color: rgba(255, 255, 255, 0.3);\"\n                  @click=\"disconnectMidiInput\">\n              <div style=\"width: 100%; height: 100%; display: flex; flex-flow: row nowrap; align-items: center;\">\n                Disconnect\n              </div>\n            </span>\n          </template>\n          {{playingScale()}}\n        </div>\n      </div>\n      <!-- Content wrapper border -->\n      <div style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; background-image: linear-gradient(to top, black 0px, black 1px, transparent 1px, transparent 100%); pointer-events: none;\"></div>\n    </div>\n    <!-- Editor part -->\n    <div style=\"flex: 1; height: 0; margin: 2px; border: 1px solid black; display: flex; flex-flow: column nowrap;\"\n         tabindex=\"0\"\n         @keyup.8=\"onBackSpace\"\n         @keyup.46=\"onDelete\">\n      <!-- Editor tool bar part -->\n      <div style=\"height: 36px; background-color: rgb(94, 101, 108); border-bottom: 1px solid black; display: flex; flex-flow: row nowrap;\">\n        <div style=\"height: 24px; width: 159px; background-color: transparent;\"></div>\n        <div style=\"height: 100%; width: 32px; background-color: rgb(63, 140, 191); display: flex; flex-flow: row nowrap; align-items: center; justify-content: center; font-size: 7px; color: white;\">\n          Select\n        </div>\n        <div style=\"height: 100%; width: 32px; background-color: rgb(94, 101, 108); display: flex; flex-flow: row nowrap; align-items: center; justify-content: center; font-size: 7px; color: white;\">\n          Edit\n        </div>\n      </div>\n      <!-- Editor main part -->\n      <div style=\"flex: 1; height: 0; display: flex; flex-flow: row nowrap;\">\n        <!-- Track List (Left) -->\n        <div style=\"width: 192px; background-color: rgb(29, 30, 32); display: flex; flex-flow: column nowrap;\">\n          <div style=\"flex: 1; height: 0; background-color: rgb(94, 101, 108); margin-right: 1px;\"></div>\n        </div>\n        <!-- Track Editor (Right) -->\n        <div style=\"flex: 1; width: 0; background-color: rgb(29, 30, 32); display: flex; flex-flow: column nowrap;\">\n          <!-- Top part -->\n          <div style=\"height: 81px;\">\n            <!-- Left/Right divider -->\n            <div style=\"width: 100%; height: 100%; display: flex; flex-flow: row nowrap;\">\n              <!-- Left side -->\n              <div style=\"width: 64px; background-color: rgb(39, 42, 45);\">\n                <button @click=\"flagCollapse = !flagCollapse\">{{flagCollapse}}</button>\n              </div>\n              <!-- Right side (horizontally scrollable) -->\n              <div ref=\"headerPane\" class=\"no-scrollbar-holizontal\" style=\"margin-right: 17px; flex: 1; overflow: scroll; background-color: blue;\"\n                  @scroll=\"onScroll_headerPane($event)\">\n                <!-- Content -->\n                <div :style=\"{\n                    'display': 'flex',\n                    'flex-flow': 'column nowrap',\n                    'width': ((totalDuration / 1920.0) * global.barWidth) + 'px',\n                    'background-color': 'rgb(42, 45, 49)',\n                    'height': '80px',\n                    'border-bottom': '1px rgb(31, 33, 36) solid',\n                    }\">\n                  <!-- Beats bar -->\n                  <div :style=\"{\n                      'position': 'relative',\n                      'width': '100%',\n                      'height': '32px',\n                      }\"\n                      @mouseup=\"onMouseUp_BeatsBar\">\n                    <div :style=\"{\n                      'position': 'absolute',\n                      'bottom': '1px',\n                      'left': '0px',\n                      'width': '100%',\n                      'height': '1px',\n                      'background-color': `black`,\n                      'pointer-events': `none`,\n                    }\">\n                    </div>\n                    <div :style=\"{\n                      'position': 'absolute',\n                      'bottom': '0px',\n                      'left': '0px',\n                      'width': '100%',\n                      'height': '1px',\n                      'background-color': `rgb(38, 40, 43)`,\n                      'pointer-events': `none`,\n                    }\">\n                    </div>\n                    <!-- Beat indicators -->\n                    <div v-for=\"beat in divideDuration(totalDuration, 480)\" :key=\"beat.localOffset\" :style=\"{\n                      'position': 'absolute',\n                      'bottom': '1px',\n                      'left': ((beat.localOffset / 1920.0) * global.barWidth) + 'px',\n                      'width': '1px',\n                      'height': '4px',\n                      'background-color': `white`,\n                      'pointer-events': `none`,\n                    }\">\n                    </div>\n                  </div>\n                  <!-- Scale/Chord intervals -->\n                  <div :style=\"{\n                      'position': 'relative',\n                      'width': '100%',\n                      'height': '48px',\n                      }\">\n                    <div :style=\"{\n                        'position': 'absolute',\n                        'top': '0px',\n                        'left': '0px',\n                        'width': '100%',\n                        'height': '100%',\n                        }\">\n                      <!-- Beat indicators -->\n                      <div v-for=\"beat in divideDuration(totalDuration, 480)\" :key=\"beat.localOffset\" :style=\"{\n                        'position': 'absolute',\n                        'top': '0',\n                        'left': ((beat.localOffset / 1920.0) * global.barWidth) + 'px',\n                        'width': ((beat.duration / 1920.0) * global.barWidth) + 'px',\n                        'height': '100%',\n                        'background-image': `linear-gradient(to right, rgb(61, 63, 65) 0, rgb(61, 63, 65) 1px, transparent 1px, transparent 100%)`,\n                        'pointer-events': `none`,\n                      }\">\n                      </div>\n                    </div>\n                    <div :style=\"{\n                        'position': 'absolute',\n                        'top': '0px',\n                        'left': '0px',\n                        'display': 'flex',\n                        'flex-flow': 'row nowrap',\n                        'width': '100%',\n                        'height': '100%',\n                        }\">\n                      <!-- Scale interval indicators -->\n                      <scale-interval-indicator v-for=\"int in scaleIntervals\" :key=\"int.id\" :scale-interval=\"int\" @new-scale-interval=\"onNewScaleInterval\" @new-chord-interval=\"onNewChordInterval\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Bottom part -->\n          <div style=\"flex: 1; height: 0;\">\n            <!-- Left/Right divider -->\n            <div style=\"width: 100%; height: 100%; display: flex; flex-flow: row nowrap; background-color: rgb(33, 35, 38);\">\n              <!-- Left side -->\n              <div style=\"position: relative; margin-bottom: 17px; width: 64px; background-color: green;\">\n                <!-- Content viewport (vertically scrollable) -->\n                <div ref=\"pitchesPane\" class=\"no-scrollbar\" style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0;\"\n                  @scroll=\"onScroll_pitchesPane($event)\">\n                  <!-- Content -->\n                  <div\n                    :style=\"{\n                      'width': '100%',\n                      'height': (pitches.length * pitchHeight) + 'px',\n                      'background-color': 'rgb(240, 242, 243)',\n                      }\">\n                    <div v-for=\"pitch in pitches\" :key=\"pitch\" :style=\"{\n                      'height': pitchHeight + 'px',\n                      }\"\n                      :class=\"{\n                        'piano-key': true,\n                        'scale-tone': (\n                          [0, 2, 4, 5, 7, 9, 11].includes(pitch % 12)\n                          ),\n                        'non-scale-tone': !(\n                          [0, 2, 4, 5, 7, 9, 11].includes(pitch % 12)\n                          ),\n                        'note-on': isNoteOn[pitch],\n                      }\">\n                    </div>\n                  </div>\n                </div>\n                <!-- Content viewport border -->\n                <div style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0; box-shadow: inset 0px 0px 0px 1px rgb(24, 24, 24); pointer-events: none;\"></div>\n              </div>\n              <!-- Right side -->\n              <div ref=\"notesPane\"\n                  style=\"flex: 1; overflow: scroll; background-color: rgb(50, 53, 56);\"\n                  @scroll=\"onScroll_notesPane($event)\">\n                <!-- Content -->\n                <div :style=\"{\n                    'display': 'flex',\n                    'flex-flow': 'row nowrap',\n                    'position': 'relative',\n                    'width': ((totalDuration / 1920.0) * global.barWidth) + 'px',\n                    'height': (pitches.length * pitchHeight) + 'px',\n                    }\">\n                  <!-- Scale intervals -->\n                  <div v-for=\"int in scaleIntervals\" :key=\"int.id\" :style=\"{\n                    'display': 'flex',\n                    'flex-flow': 'row nowrap',\n                    'box-sizing': 'border-box',\n                    'width': ((int.duration / 1920.0) * global.barWidth) + 'px',\n                    'height': '100%',\n                    }\">\n                    <!-- Chord intervals -->\n                    <div v-for=\"chd in int.chordIntervals\" :key=\"chd.id\" :style=\"{\n                      'position': 'relative',\n                      'display': 'flex',\n                      'flex-flow': 'column nowrap',\n                      'width': ((chd.duration / 1920.0) * global.barWidth) + 'px',\n                      'height': '100%',\n                      }\">\n                      <!-- Pitch row wrappers -->\n                      <div v-for=\"pitch in pitches\" :key=\"pitch\" :class=\"{\n                        'pitch-row-wrapper': true,\n                        'scale-tone': (int.scale == null ? true : int.scale.includes(pitch % 12)),\n                        'non-scale-tone': (int.scale == null ? false : !int.scale.includes(pitch % 12)),\n                        'central-tone': (int.scale == null ? false : pitch % 12 === int.scale[0]),\n                        'root-tone': (int.scale == null ? false : (chd.chord == null ? false : pitch % 12 === chd.chord[0])),\n                        'note-on': isNoteOn[pitch],\n                        }\" :style=\"{\n                        'position': 'absolute',\n                        'width': '100%',\n                        'height': pitchHeight + 'px',\n                        'transform': `translate(0, ${global.getPositionInCollapseMode((flagCollapse && int.scale) || [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], pitch) * pitchHeight}px)`,\n                        'transform-style': 'preserve-3d',\n                        }\">\n                        <!-- Pitch row -->\n                        <pitch-row :scale-interval=\"int\" :chord-interval=\"chd\" :pitch=\"pitch\" :selected-notes=\"selectedNotes\" @new-note=\"onNewNote\" />\n                      </div>\n                      <!-- Beat indicators -->\n                      <div v-for=\"(beat, index) in divideDuration(chd.duration, 480)\" :key=\"beat.localOffset\" :style=\"{\n                        'position': 'absolute',\n                        'top': '0',\n                        'left': ((beat.localOffset / 1920.0) * global.barWidth) + 'px',\n                        'width': ((beat.duration / 1920.0) * global.barWidth) + 'px',\n                        'height': '100%',\n                        'background-image': `linear-gradient(to right, ${int.scale == null ? 'transparent' : (index === 0 && chd.chord != null ? 'black' : 'transparent')} 0, ${int.scale == null ? 'transparent' : (index === 0 && chd.chord != null ? 'black' : 'transparent')} 1px, transparent 1px, transparent 100%)`,\n                        'pointer-events': `none`,\n                      }\">\n                      </div>\n                    </div>\n                  </div>\n                  <!-- Beat indicators -->\n                  <div v-for=\"beat in divideDuration(totalDuration, 480)\" :key=\"beat.localOffset\" :style=\"{\n                    'position': 'absolute',\n                    'top': '0',\n                    'left': ((beat.localOffset / 1920.0) * global.barWidth) + 'px',\n                    'width': ((beat.duration / 1920.0) * global.barWidth) + 'px',\n                    'height': '100%',\n                    'background-image': `linear-gradient(to right, rgb(61, 63, 65) 0, rgb(61, 63, 65) 1px, transparent 1px, transparent 100%)`,\n                    'pointer-events': `none`,\n                  }\">\n                  </div>\n                  <div :style=\"{\n                    'position': 'absolute',\n                    'top': '0',\n                    'left': ((playingOffset / 1920.0) * global.barWidth) + 'px',\n                    'width': '1px',\n                    'height': '100%',\n                    'background-color': `rgba(255, 255, 255, 0.5)`,\n                    'pointer-events': `none`,\n                  }\">\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <modal name=\"midi-input-configuration\" height=\"auto\">\n      <div style=\"padding: 14px 16px; font-size: 14px;\">\n        <template v-if=\"midiAccess != null\">\n          <template v-if=\"midiInputs != null\">\n            <div v-for=\"(input, index) in midiInputs\" :key=\"input.name\"\n                 :style=\"{\n                   'margin-top': (index === 0 ? '0' : '12px'),\n                 }\">\n              <!-- TODO: Implement \"Select all\" -->\n              <!-- <input type=\"checkbox\" /> -->\n              {{input.name}}\n              <div v-for=\"ch in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\" :key=\"ch\"\n                  style=\"margin-left: 16px;\">\n                <!-- TODO: Restore check state if this modal window is shown again -->\n                <input type=\"checkbox\" @change=\"onMidiInputChannelToggled(input, ch, $event.target.checked)\" />\n                CH{{ch}}\n              </div>\n            </div>\n          </template>\n          <template v-else>\n            <div>MIDI inputs are not available!</div>\n          </template>\n        </template>\n      </div>\n    </modal>\n  </div>\n</template>\n\n<script>\nimport * as MIDIFile from 'midifile';\nimport * as MIDIEvents from 'midievents';\n\nconst global = {\n  barWidth: 128,\n  barWidthMin: 4,\n  barWidthMax: 2048,\n  granularity: 120, // 1 quarter note = 480 ticks (de-facto standard in MIDI)\n  getNormalizedScale(originalScale) {\n    let normalizedScale;\n    normalizedScale = JSON.parse(JSON.stringify(originalScale)); // Prevent destructive updating\n    normalizedScale = normalizedScale.map(v => ((v - originalScale[0])+12)%12); // [9, 11, 0, 2, 4, 5, 7] -> [0, 2, 3, 5, 7, 8, 10]\n\n    return normalizedScale;\n  },\n  getScaleNames(originalScale) {\n    if (originalScale == null) { throw new Error(`Invalid scale: ${JSON.stringify(originalScale)}`); }\n\n    const normalizedScale = global.getNormalizedScale(originalScale);\n\n    switch (JSON.stringify(normalizedScale)) {\n      case JSON.stringify([0, 2, 4, 5, 7, 9, 11]): // Major scale\n        return global.getNoteNames(originalScale[0]).map(v => `${v} major`);\n      case JSON.stringify([0, 2, 3, 5, 7, 8, 10]): // Natural minor scale\n        return global.getNoteNames(originalScale[0]).map(v => `${v} minor`);\n      default:\n        return `Unknown scale (${originalScale.join(', ')})`;\n    }\n  },\n  // This app always shows degree labels if a scale is given.\n  // So there is no need to support all enharmonics of each note, but black keys are supported for absolute note notation.\n  getNoteNames(pitchClass) {\n    switch (pitchClass) {\n      case 0: return ['C'];\n      case 1: return ['C#', 'Db'];\n      case 2: return ['D'];\n      case 3: return ['D#', 'Eb'];\n      case 4: return ['E'];\n      case 5: return ['F'];\n      case 6: return ['F#', 'Gb'];\n      case 7: return ['G'];\n      case 8: return ['G#', 'Ab'];\n      case 9: return ['A'];\n      case 10: return ['A#', 'Bb'];\n      case 11: return ['B'];\n      default: throw new Error('Valid range of pitch class is 0-11.');\n    }\n  },\n  getDegreeLabels(originalScale, pitchClass) {\n    if (originalScale == null) { throw new Error(`Invalid scale: ${JSON.stringify(originalScale)}`); }\n\n    const normalizedScale = global.getNormalizedScale(originalScale);\n    const normalizedPitchClass = ((pitchClass - originalScale[0])+12)%12;\n\n    switch (JSON.stringify(normalizedScale)) {\n      case JSON.stringify([0, 2, 4, 5, 7, 9, 11]): // Major scale\n        return [['I'], ['♯I', '♭II'], ['II'], ['♭III'], ['III'], ['IV'], ['♯IV', '♭V'], ['V'], ['♭VI'], ['VI'], ['♭VII'], ['VII']][normalizedPitchClass];\n      case JSON.stringify([0, 2, 3, 5, 7, 8, 10]): // Natural minor scale\n        return [['I'], ['♯I', '♭II'], ['II'], ['♭III'], ['III'], ['IV'], ['♯IV', '♭V'], ['V'], ['♭VI'], ['VI'], ['♭VII'], ['VII']][normalizedPitchClass];\n      default:\n        return [['I'], ['♯I', '♭II'], ['II'], ['♯II', '♭III'], ['III'], ['IV'], ['♯IV', '♭V'], ['V'], ['♯V', '♭VI'], ['VI'], ['♯VI', '♭VII'], ['VII']][normalizedPitchClass];\n    }\n  },\n  getIntervalsFromRoot(originalScale, rootPitchClass, targetPitchClass) {\n    // console.log(`(originalScale=${originalScale}, rootPitchClass=${rootPitchClass}, targetPitchClass=${targetPitchClass}`);\n    if (originalScale == null) { throw new Error(`Invalid scale: ${JSON.stringify(originalScale)}`); }\n\n    let retval;\n\n    // Example:\n    //  Original scale = [9, 11, 0, 2, 4, 5, 7]\n    //  Original root pitch = 7\n    //  Original target pitch = 11\n    //\n    //  Normalized scale = [0, 2, 3, 5, 7, 8, 10]\n    //  Normalized root pitch = 10\n    //  Normalized target pitch = 2\n    //\n    //  Chromatic interval = 4\n    //  Interval = major 3rd\n    const normalizedScale = global.getNormalizedScale(originalScale);\n    const normalizedRootPitchClass = ((rootPitchClass - originalScale[0])+12)%12;\n    const normalizedTargetPitchClass = ((targetPitchClass - originalScale[0])+12)%12;\n    const chromaticInterval = ((normalizedTargetPitchClass - normalizedRootPitchClass)+12)%12;\n\n    switch (JSON.stringify(normalizedScale)) {\n      case JSON.stringify([0, 2, 4, 5, 7, 9, 11]): // Major scale\n        // throw new Error('The major scale is not supported yet.');\n        retval = [\n          ['Root'],\n          ['♯1', '♭2'],\n          ['2'],\n          ['♯2', '♭3'],\n          ['3'],\n          ['4'],\n          ['♯4', '♭5'],\n          ['5'],\n          ['♯5', '♭6'],\n          ['6'],\n          ['♯6', '♭7'],\n          ['7'],\n        ][chromaticInterval];\n        break;\n      case JSON.stringify([0, 2, 3, 5, 7, 8, 10]): // Natural minor scale\n        switch (normalizedRootPitchClass) {\n          // [I, 2nd, 3rd, 4th, 5th, 6th, 7th] = [0, 2, 3, 5, 7, 8, 10]\n          case 0:\n            retval = [\n              ['Root'], // I\n              ['♭2'], // ♯I, ♭II\n              ['2'], // II\n              ['3'], // ♭III\n              ['♯3', '♭4'], // III\n              ['4'], // IV\n              ['♯4', '♭5'], // ♯IV, ♭V\n              ['5'], // V\n              ['6'], // ♭VI\n              ['♯6', '♭7'], // VI\n              ['7'], // ♭VII\n              ['♯7'], // VII\n            ][chromaticInterval];\n            break;\n\n          // [#I, 2nd, 3rd, 4th, 5th, 6th, 7th] = [1, 2, 3, 5, 7, 8, 10] <---- Using this here\n          // [bII, 2nd, 3rd, 4th, 5th, 6th, 7th] = [1, 3, 5, 7, 8, 10, 0]\n          case 1:\n            retval = [\n              ['Root'], // ♯I\n              ['2'], // II\n              ['3'], // ♭III\n              ['♯3', '♭4'], // III\n              ['4'], // IV\n              ['♯4', '♭5'], // ♯IV, ♭V\n              ['5'], // V\n              ['6'], // ♭VI\n              ['♯6', '♭7'], // VI\n              ['7'], // ♭VII\n              ['♯7'], // VII\n              ['Orig 1st'], // I\n            ][chromaticInterval];\n            break;\n\n          // [II, 2nd, 3rd, 4th, 5th, 6th, 7th] = [2, 3, 5, 7, 8, 10, 0]\n          case 2:\n            retval = [\n              ['Root'], // II\n              ['2'], // ♭III\n              ['♯2', '♭3'], // III\n              ['3'], // IV\n              ['♯3', '♭4'], // ♯IV, ♭V\n              ['4'], // V\n              ['5'], // ♭VI\n              ['♯5', '♭6'], // VI\n              ['6'], // ♭VII\n              ['♯6', '♭7'], // VII\n              ['7'], // I\n              ['♯7'], // ♯I, ♭II\n            ][chromaticInterval];\n            break;\n\n          // [bIII, 2nd, 3rd, 4th, 5th, 6th, 7th] = [3, 5, 7, 8, 10, 0, 2]\n          case 3:\n            retval = [\n              ['Root'], // ♭III\n              ['♭2'], // III\n              ['2'], // IV\n              ['♯2', '♭3'], // ♯IV, ♭V\n              ['3'], // V\n              ['4'], // ♭VI\n              ['♯4', '♭5'], // VI\n              ['5'], // ♭VII\n              ['♯5', '♭6'], // VII\n              ['6'], // I\n              ['♯6', '♭7'], // ♯I, ♭II\n              ['7'], // II\n            ][chromaticInterval];\n            break;\n\n          // [III, 2nd, 3rd, 4th, 5th, 6th, 7th] = [4, 5, 7, 8, 10, 0, 2]\n          case 4:\n            retval = [\n              ['Root'], // III\n              ['2'], // IV\n              ['♯2', '♭3'], // ♯IV, ♭V\n              ['3'], // V\n              ['4'], // ♭VI\n              ['♯4', '♭5'], // VI\n              ['5'], // ♭VII\n              ['♯5', '♭6'], // VII\n              ['6'], // I\n              ['♯6', '♭7'], // ♯I, ♭II\n              ['7'], // II\n              ['Orig 1st'], // ♭III\n            ][chromaticInterval];\n            break;\n\n          // [IV, 2nd, 3rd, 4th, 5th, 6th, 7th] = [5, 7, 8, 10, 0, 2, 3]\n          case 5:\n            retval = [\n              ['Root'], // IV\n              ['♭2'], // ♯IV, ♭V\n              ['2'], // V\n              ['3'], // ♭VI\n              ['♯3', '♭4'], // VI\n              ['4'], // ♭VII\n              ['♯4', '♭5'], // VII\n              ['5'], // I\n              ['♯5', '♭6'], // ♯I, ♭II\n              ['6'], // II\n              ['7'], // ♭III\n              ['♯7'], // III\n            ][chromaticInterval];\n            break;\n\n          // [#IV, 2nd, 3rd, 4th, 5th, 6th, 7th] = [6, 7, 8, 10, 0, 2, 3] <---- Using this here\n          // [bV, 2nd, 3rd, 4th, 5th, 6th, 7th] = [6, 8, 10, 0, 2, 3, 5]\n          case 6:\n            retval = [\n              ['Root'], // ♯IV, ♭V\n              ['2'], // V\n              ['3'], // ♭VI\n              ['♯3', '♭4'], // VI\n              ['4'], // ♭VII\n              ['♯4', '♭5'], // VII\n              ['5'], // I\n              ['♯5', '♭6'], // ♯I, ♭II\n              ['6'], // II\n              ['7'], // ♭III\n              ['♯7'], // III\n              ['Orig 1st'], // IV\n            ][chromaticInterval];\n            break;\n\n          // [V, 2nd, 3rd, 4th, 5th, 6th, 7th] = [7, 8, 10, 0, 2, 3, 5]\n          case 7:\n            retval = [\n              ['Root'], // V\n              ['2'], // ♭VI\n              ['♯2', '♭3'], // VI\n              ['3'], // ♭VII\n              ['♯3', '♭4'], // VII\n              ['4'], // I\n              ['♯4', '♭5'], // ♯I, ♭II\n              ['5'], // II\n              ['6'], // ♭III\n              ['♯6', '♭7'], // III\n              ['7'], // IV\n              ['♯7'], // ♯IV, ♭V\n            ][chromaticInterval];\n            break;\n\n          // [bVI, 2nd, 3rd, 4th, 5th, 6th, 7th] = [8, 10, 0, 2, 3, 5, 7]\n          case 8:\n            retval = [\n              ['Root'], // ♭VI\n              ['♭2'], // VI\n              ['2'], // ♭VII\n              ['♯2', '♭3'], // VII\n              ['3'], // I\n              ['♯3', '♭4'], // ♯I, ♭II\n              ['4'], // II\n              ['5'], // ♭III\n              ['♯5', '♭6'], // III\n              ['6'], // IV\n              ['♯6', '♭7'], // ♯IV, ♭V\n              ['7'], // V\n            ][chromaticInterval];\n            break;\n\n          // [VI, 2nd, 3rd, 4th, 5th, 6th, 7th] = [9, 10, 0, 2, 3, 5, 7]\n          case 9:\n            retval = [\n              ['Root'], // VI\n              ['2'], // ♭VII\n              ['♯2', '♭3'], // VII\n              ['3'], // I\n              ['♯3', '♭4'], // ♯I, ♭II\n              ['4'], // II\n              ['5'], // ♭III\n              ['♯5', '♭6'], // III\n              ['6'], // IV\n              ['♯6', '♭7'], // ♯IV, ♭V\n              ['7'], // V\n              ['Orig 1st'], // ♭VI\n            ][chromaticInterval];\n            break;\n\n          // [bVII, 2nd, 3rd, 4th, 5th, 6th, 7th] = [10, 0, 2, 3, 5, 7, 8]\n          case 10:\n            retval = [\n              ['Root'], // ♭VII\n              ['♭2'], // VII\n              ['2'], // I\n              ['♯2', '♭3'], // ♯I, ♭II\n              ['3'], // II\n              ['4'], // ♭III\n              ['♯4', '♭5'], // III\n              ['5'], // IV\n              ['♯5', '♭6'], // ♯IV, ♭V\n              ['6'], // V\n              ['7'], // ♭VI\n              ['♯7'], // VI\n            ][chromaticInterval];\n            break;\n\n          // [VII, 2nd, 3rd, 4th, 5th, 6th, 7th] = [11, 0, 2, 3, 5, 7, 8]\n          case 11:\n            retval = [\n              ['Root'], // VII\n              ['2'], // I\n              ['♯2', '♭3'], // ♯I, ♭II\n              ['3'], // II\n              ['4'], // ♭III\n              ['♯4', '♭5'], // III\n              ['5'], // IV\n              ['♯5', '♭6'], // ♯IV, ♭V\n              ['6'], // V\n              ['7'], // ♭VI\n              ['♯7'], // VI\n              ['Orig 1st'], // ♭VII\n            ][chromaticInterval];\n            break;\n\n          default: throw new Error('Valid range of pitch class is 0-11.');\n        }\n        break;\n      default:\n        throw new Error('This scale is not supported: ' + normalizedScale);\n    }\n\n    // console.log(retval);\n    return retval;\n  },\n  getTransposeDistance(originalScale) {\n    if (originalScale == null) { throw new Error(`Invalid scale: ${JSON.stringify(originalScale)}`); }\n\n    const normalizedScale = global.getNormalizedScale(originalScale);\n\n    switch (JSON.stringify(normalizedScale)) {\n      case JSON.stringify([0, 2, 4, 5, 7, 9, 11]): // Major scale\n        switch (originalScale[0]) {\n          case 0:\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n            return originalScale[0];\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 11:\n            return -(12 - originalScale[0]);\n        }\n      case JSON.stringify([0, 2, 3, 5, 7, 8, 10]): // Natural minor scale\n        switch (originalScale[0]) {\n          case 9:\n          case 10:\n          case 11:\n          case 0:\n          case 1:\n          case 2:\n            return (((originalScale[0]-9)+12)%12);\n          case 3:\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n            return -(12 - (((originalScale[0]-9)+12)%12));\n        }\n      case null:\n        return 0;\n      default:\n        console.error(`Unknown scale (${originalScale.join(', ')})`);\n        return 0;\n    }\n  },\n  getPositionInCollapseMode(originalScale, pitch) {\n    console.log(`originalScale: ${originalScale}, pitch: ${pitch}`);\n    // When a -6 scale is given, count the number of scale tones in [127, pitch)\n    // When a 0 scale is given, count the number of scale tones in [127+6, pitch)\n    // When a +5 scale is given, count the number of scale tones in [127+11, pitch)\n    let position = 0;\n    for (let i = 127+(global.getTransposeDistance(originalScale)+6) ; i > pitch ; i--) {\n      if (originalScale.includes(i % 12)) {\n        position += 1;\n      }\n    }\n    return position;\n  },\n};\nconst getPageXY = (element) => {\n  let xPosition = 0;\n  let yPosition = 0;\n\n  while (element) {\n    xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);\n    yPosition += (element.offsetTop - element.scrollTop + element.clientTop);\n    element = element.offsetParent;\n  }\n\n  return { x: xPosition, y: yPosition };\n};\n\nexport default {\n  name: 'app',\n  data() {\n    return {\n      global: global,\n      flagCollapse: false,\n      msg: 'Welcome to Your Vue.js App',\n      pitchMax: 127,\n      pitchMin: 0,\n      pitchHeight: 16,\n      pitchHeightMin: 2,\n      pitchHeightMax: 21,\n      scaleIntervals: [\n        {\n          id: Math.random(),\n          duration: 1920 * 256,\n          scale: null,\n          chordIntervals: [\n            {\n              id: Math.random(),\n              localOffset: 0,\n              duration: 1920 * 256,\n              chord: null,\n              notes: [],\n            },\n          ],\n        },\n      ],\n      selectedNotes: [],\n      playingOffset: 0,\n      midiAccess: null,\n      midiInputs: null,\n      midiOutputs: null,\n      selectedMidiInputs: [],\n      isNoteOn: {},\n    };\n  },\n  watch: {\n    isNoteOn: {\n      handler: function (val, oldVal) {\n        console.log('new: %s, old: %s', val, oldVal);\n      },\n      deep: true,\n    },\n  },\n  computed: {\n    pitches() {\n      const pitches = [];\n      for (let i = this.pitchMin ; i <= this.pitchMax ; i++) {\n        pitches.unshift(i);\n      }\n      return pitches;\n    },\n    totalDuration() {\n      let totalDuration = 0;\n      for (const int of this.scaleIntervals) {\n        totalDuration += int.duration;\n      }\n      return totalDuration;\n    },\n  },\n  methods: {\n    rerender() {\n      const rec = (component) => {\n        component.$forceUpdate();\n        if (component.$children.length > 0) {\n          for (let i = 0 ; i < component.$children.length ; i++) {\n            rec(component.$children[i]);\n          }\n        }\n      };\n      rec(this);\n    },\n    playingScale() {\n      let retval = null;\n      let tempOffset = this.playingOffset;\n      for (const si of this.scaleIntervals) { // Identify the scale interval on which the current playing offset is\n        if (tempOffset >= 0 && tempOffset < si.duration) {\n          retval = si.scale;\n          break;\n        } else {\n          tempOffset -= si.duration;\n        }\n      }\n      return retval;\n    },\n    transposeDistance() {\n      return global.getTransposeDistance(this.playingScale());\n    },\n    /**\n     * Divides the specified duration into several durations based on the specified unit.\n     *\n     * Example\n     *   Input: duration=840, unit=200\n     *   Output: [\n     *     { localOffset: 0, duration: 200 },\n     *     { localOffset: 200, duration: 200 },\n     *     { localOffset: 400, duration: 200 },\n     *     { localOffset: 600, duration: 200 },\n     *     { localOffset: 800, duration: 40 },\n     *   ]\n     *\n     *   Input: duration=800, unit=200\n     *   Output: [\n     *     { localOffset: 0, duration: 200 },\n     *     { localOffset: 200, duration: 200 },\n     *     { localOffset: 400, duration: 200 },\n     *     { localOffset: 600, duration: 200 },\n     *   ]\n     */\n    divideDuration(duration, unit) {\n      // console.log(`divideDuration(duration=${duration}, unit=${unit})`);\n      const retval = [];\n      let tempOffset = 0;\n      for ( ; tempOffset + unit < duration ; tempOffset += unit) {\n        retval.push({\n          localOffset: tempOffset,\n          duration: unit,\n        });\n      }\n      retval.push({\n        localOffset: tempOffset,\n        duration: duration - tempOffset,\n      });\n\n      // console.log(retval);\n      return retval;\n    },\n    onWheel($event) {\n      // console.log($event);\n      if ($event.ctrlKey) {\n        if ($event.shiftKey) {\n          if ($event.deltaY !== 0) { // Horizontal zoom\n            if ($event.deltaY < 0) {\n              if (global.barWidth * 2 <= global.barWidthMax) { // Higher boundary clipping\n                global.barWidth *= 2;\n              }\n            } else if ($event.deltaY > 0) {\n              if (global.barWidth / 2 >= global.barWidthMin) { // Lower boundary clipping\n                global.barWidth /= 2;\n              }\n            }\n          }\n          $event.stopPropagation();\n          $event.preventDefault();\n        } else {\n          if ($event.deltaY !== 0) { // Vertical zoom\n            if ($event.deltaY < 0) {\n              if (this.pitchHeight + 2 <= this.pitchHeightMax) { // Higher boundary clipping\n                this.pitchHeight += 2;\n              }\n            } else if ($event.deltaY > 0) {\n              if (this.pitchHeight - 2 >= this.pitchHeightMin) { // Lower boundary clipping\n                this.pitchHeight -= 2;\n              }\n            }\n          }\n          $event.stopPropagation();\n          $event.preventDefault();\n        }\n      }\n    },\n    onDelete() {\n      this.scaleIntervals.forEach(si => {\n        si.chordIntervals.forEach(ci => {\n          this.selectedNotes.forEach(selectedNote => {\n            const i = ci.notes.findIndex(note => note === selectedNote);\n            if (i !== -1) {\n              // console.log('Selected note is found! Deleting...');\n              ci.notes.splice(i, 1);\n            }\n          });\n        });\n      });\n    },\n    onBackSpace() {\n      const isMacLike = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;\n\n      if (isMacLike) {\n        this.onDelete(); // In Mac-like system, treat BackSpace keycode as Delete keycode\n      }\n      // In Windows, ignore BackSpace keycode\n    },\n    onDragOver($event) {\n      $event.stopPropagation();\n      $event.preventDefault(); // default dragover event handler must be canceled to enable drop event\n    },\n    onDrop($event) {\n      $event.stopPropagation();\n      $event.preventDefault();\n\n      const files = $event.dataTransfer.files;\n      if (!files) {\n        alert('Please drop a file.');\n        return;\n      }\n      if (files.length !== 1) {\n        alert('Please specify a single file.');\n        return;\n      }\n\n      {\n        const file = files[0];\n        alert(`${file.name} (${file.type}) - ${file.size} bytes (${file.lastModifiedDate.toLocaleDateString()})`);\n\n        const reader = new FileReader();\n        reader.onloadstart = (event) => {\n          console.log(event);\n        };\n        reader.onprogress = (event) => {\n          console.log(event);\n        };\n        reader.onloadend = (event) => {\n          console.log(event);\n        };\n        reader.onload = (event) => {\n          console.log(event);\n          const midiFile = new MIDIFile(reader.result);\n          // console.log(midiFile);\n          // console.log('getFormat: ' + midiFile.header.getFormat());\n          // console.log('getSMPTEFrames: ' + midiFile.header.getSMPTEFrames());\n          // console.log('getTickResolution: ' + midiFile.header.getTickResolution());\n          // console.log('getTicksPerBeat: ' + midiFile.header.getTicksPerBeat());\n          // console.log('getTicksPerFrame: ' + midiFile.header.getTicksPerFrame());\n          // console.log('getTimeDivision: ' + midiFile.header.getTimeDivision());\n          // console.log('getTracksCount: ' + midiFile.header.getTracksCount());\n          switch (midiFile.header.getFormat()) {\n            case 0: {\n              //console.log(midiFile.getMidiEvents());\n              const trackEventsChunk = midiFile.tracks[0].getTrackContent();\n              const midiEventIterator = MIDIEvents.createParser(trackEventsChunk); // 3rd argument enables strict mode\n\n              // Clear the current scale intervals only if the runtime reach here\n              this.scaleIntervals.length = 0;\n\n              const midiNotes = [];\n              // Temporary variables\n              const noteStates = (new Array(16)).fill(new Array(128));\n              for (let i = 0 ; i < noteStates.length ; i++) {\n                for (let j = 0 ; j < noteStates[i].length ; j++) {\n                  noteStates[i][j] = { isOn: false, onTime: null };\n                }\n              }\n              // console.log(noteStates);\n              let midiEvent;\n              let tick = 0;\n              while (midiEvent = midiEventIterator.next()) {\n                // console.log(midiEvent);\n                tick += midiEvent.delta;\n                // console.log(`tick = ${tick}`);\n\n                // Only accept specific MIDI events (Note Off and Note On)\n                switch (midiEvent.type) {\n                  case MIDIEvents.EVENT_MIDI:\n                    switch (midiEvent.subtype) {\n                      case MIDIEvents.EVENT_MIDI_NOTE_OFF: {\n                        if (midiEvent.channel === 9) {\n                          // console.info(`The note (Tick = ${tick}, Pitch = ${midiEvent.param1}) is in the drum channel. Ignored.`);\n                          break;\n                        }\n\n                        const ns = noteStates[midiEvent.channel][midiEvent.param1];\n                        if (ns.isOn === true) {\n                          midiNotes.push(\n                            {\n                              id: Math.random(),\n                              channel: midiEvent.channel,\n                              localOffset: ns.onTime,\n                              duration: tick - ns.onTime,\n                              pitch: midiEvent.param1,\n                            },\n                          );\n                          ns.isOn = false;\n                          ns.onTime = null;\n                          // console.log(`The note (Channel = ${midiEvent.channel}, Pitch = ${midiEvent.param1}) was just set to OFF!`);\n                        } else {\n                          // console.warn(`The note (Channel = ${midiEvent.channel}, Pitch = ${midiEvent.param1}) is already OFF. Ignored.`);\n                        }\n                        break;\n                      }\n                      case MIDIEvents.EVENT_MIDI_NOTE_ON: {\n                        if (midiEvent.channel === 9) {\n                          // console.info(`The note (Tick = ${tick}, Pitch = ${midiEvent.param1}) is in the drum channel. Ignored.`);\n                          break;\n                        }\n\n                        const ns = noteStates[midiEvent.channel][midiEvent.param1];\n                        if (ns.isOn === false) {\n                          ns.isOn = true;\n                          ns.onTime = tick;\n                          // console.log(`The note (Channel = ${midiEvent.channel}, Pitch = ${midiEvent.param1}) was just set to ON!`);\n                        } else {\n                          if (ns.onTime === tick) {\n                            // console.warn(`Duplicate Note On detected (Tick = ${tick}, Channel = ${midiEvent.channel}, Pitch = ${midiEvent.param1}). Ignored.`);\n                          } else {\n                            midiNotes.push(\n                              {\n                                id: Math.random(),\n                                channel: midiEvent.channel,\n                                localOffset: ns.onTime,\n                                duration: tick - ns.onTime,\n                                pitch: midiEvent.param1,\n                              },\n                            );\n                            ns.onTime = tick;\n                            // console.warn(`The note (Channel = ${midiEvent.channel}, Pitch = ${midiEvent.param1}) is already ON. Treated as OFF+ON.`);\n                          }\n                        }\n                        break;\n                      }\n                      default:\n                    }\n                    break;\n                  default:\n                }\n              }\n              this.scaleIntervals.push(\n                {\n                  id: Math.random(),\n                  duration: tick,\n                  scale: null,\n                  chordIntervals: [\n                    {\n                      id: Math.random(),\n                      localOffset: 0,\n                      duration: tick,\n                      chord: null,\n                      notes: midiNotes,\n                    },\n                  ],\n                },\n              );\n              // console.log(this.scaleIntervals);\n              break;\n            }\n            case 1: {\n              alert('Format 1 is not supported!');\n              break;\n            }\n            case 2: {\n              alert('Format 2 is not supported!');\n              return;\n            }\n            default: {\n            }\n          }\n        };\n        reader.onabort = (event) => {\n          console.log(event);\n        };\n        reader.onerror = (event) => {\n          console.log(event);\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    onScroll_headerPane($event) {\n      $event.target.scrollLeftAtLatestScrollEvent = $event.target.scrollLeft; // Deal with delay of subsequent scroll event\n      if (!this.$refs.notesPane.scrollLeftAtLatestScrollEvent\n          ||\n          this.$refs.notesPane.scrollLeftAtLatestScrollEvent !== $event.target.scrollLeft) {\n        this.$refs.notesPane.scrollLeft = $event.target.scrollLeft;\n      }\n    },\n    onScroll_pitchesPane($event) {\n      $event.target.scrollTopAtLatestScrollEvent = $event.target.scrollTop; // Deal with delay of subsequent scroll event\n      if (this.$refs.notesPane.scrollTopAtLatestScrollEvent == null\n          ||\n          this.$refs.notesPane.scrollTopAtLatestScrollEvent !== $event.target.scrollTop) {\n        this.$refs.notesPane.scrollTop = $event.target.scrollTop;\n      }\n    },\n    onScroll_notesPane($event) {\n      $event.target.scrollLeftAtLatestScrollEvent = $event.target.scrollLeft; // Deal with delay of subsequent scroll event\n      $event.target.scrollTopAtLatestScrollEvent = $event.target.scrollTop;\n      if (this.$refs.headerPane.scrollLeftAtLatestScrollEvent == null\n          ||\n          this.$refs.headerPane.scrollLeftAtLatestScrollEvent !== $event.target.scrollLeft) {\n        this.$refs.headerPane.scrollLeft = $event.target.scrollLeft;\n      }\n      if (this.$refs.pitchesPane.scrollTopAtLatestScrollEvent == null\n          ||\n          this.$refs.pitchesPane.scrollTopAtLatestScrollEvent !== $event.target.scrollTop) {\n        this.$refs.pitchesPane.scrollTop = $event.target.scrollTop;\n      }\n    },\n    onMouseUp_BeatsBar($event) {\n      this.playingOffset = Math.round((((this.$refs.headerPane.scrollLeft + $event.pageX) - getPageXY($event.target).x) / $event.target.offsetWidth) * this.totalDuration);\n    },\n    onNewScaleInterval(baseScaleInterval, localOffset, duration) {\n      // console.log(`onNewScaleInterval`);\n      // console.log(`scale duration: ${baseScaleInterval.duration} - localOffset: ${localOffset} - duration: ${duration}`);\n      let baseScaleIntervalIndex = this.scaleIntervals.findIndex(v => v === baseScaleInterval);\n\n      const targetArray = this.scaleIntervals;\n      Array.prototype.splice.apply(\n        targetArray,\n        [\n          baseScaleIntervalIndex,\n          1,\n          ...this.divideScaleInterval(targetArray[baseScaleIntervalIndex], localOffset + duration, [0, 2, 4, 5, 7, 9, 11], null),\n        ],\n      );\n      Array.prototype.splice.apply(\n        targetArray,\n        [\n          baseScaleIntervalIndex,\n          1,\n          ...this.divideScaleInterval(targetArray[baseScaleIntervalIndex], localOffset, null, [0, 2, 4, 5, 7, 9, 11]),\n        ],\n      );\n      this.rerender();\n    },\n    onNewChordInterval(baseScaleInterval, baseChordInterval, localOffset, duration) {\n      // console.log('onNewChordInterval');\n      // console.log(`chord duration: ${baseChordInterval.duration} - localOffset: ${localOffset} - duration: ${duration}`);\n      let baseChordIntervalIndex = baseScaleInterval.chordIntervals.findIndex(v => v === baseChordInterval);\n\n      const centralTone = (baseScaleInterval != null ? baseScaleInterval.scale[0] : 0);\n      const targetArray = baseScaleInterval.chordIntervals;\n      Array.prototype.splice.apply(\n        targetArray,\n        [\n          baseChordIntervalIndex,\n          1,\n          ...this.divideChordInterval(targetArray[baseChordIntervalIndex], localOffset + duration, [centralTone], null),\n        ],\n      );\n      Array.prototype.splice.apply(\n        targetArray,\n        [\n          baseChordIntervalIndex,\n          1,\n          ...this.divideChordInterval(targetArray[baseChordIntervalIndex], localOffset, null, [centralTone]),\n        ],\n      );\n      this.rerender();\n    },\n    onNewNote(parentChordInterval, localOffset, duration, pitch) {\n      // console.log('onNewNote');\n      // console.log(`localOffset: ${localOffset} - duration: ${duration} - pitch: ${pitch}`);\n      const newNote = {\n        id: Math.random(),\n        localOffset: localOffset,\n        duration: duration,\n        pitch: pitch,\n      };\n      parentChordInterval.notes.push(newNote);\n\n      this.selectedNotes.length = 0;\n      this.selectedNotes.push(newNote);\n    },\n    /**\n     * Divides the specified scale interval into the two intervals, A and B, based on the specified boundary.\n     * Allocates the chord intervals among the two scale intervals as needed.\n     *\n     * @return The two intervals\n     */\n    divideScaleInterval(baseScaleInterval, boundaryOffset, scaleA, scaleB) {\n      // console.log(`divideScaleInterval`);\n      // console.log(`scale duration: ${baseScaleInterval.duration} - boundaryOffset: ${boundaryOffset}`);\n      if (boundaryOffset === baseScaleInterval.duration) {\n        return [\n          {\n            id: Math.random(),\n            duration: baseScaleInterval.duration,\n            scale: scaleA,\n            chordIntervals: baseScaleInterval.chordIntervals,\n          },\n        ];\n      }\n      if (boundaryOffset === 0) {\n        return [\n          {\n            id: Math.random(),\n            duration: baseScaleInterval.duration,\n            scale: scaleB,\n            chordIntervals: baseScaleInterval.chordIntervals,\n          },\n        ];\n      }\n\n      const newScaleIntervalA = {\n        id: Math.random(),\n        duration: boundaryOffset, // Range: [0, boundaryOffset]\n        scale: scaleA,\n        chordIntervals: [], // to be assigned\n      };\n      const newScaleIntervalB = {\n        id: Math.random(),\n        duration: baseScaleInterval.duration - boundaryOffset, // Range: [boundaryOffset, duration]\n        scale: scaleB,\n        chordIntervals: [], // to be assigned\n      };\n\n      // Search for a chord interval which should be divided\n      let needsDivision = false;\n      let targetIndex = null;\n      for (let i = 0 ; i < baseScaleInterval.chordIntervals.length ; i++) {\n        const currenttChordInterval = baseScaleInterval.chordIntervals[i];\n\n        if (i === baseScaleInterval.chordIntervals.length-1) {\n          // If no chord intervals start after boundaryOffset, the final chord interval should be divided\n          needsDivision = true;\n          targetIndex = i;\n          break;\n        } else if (i < baseScaleInterval.chordIntervals.length-1) {\n          const nextChordInterval = baseScaleInterval.chordIntervals[i+1];\n          if (nextChordInterval.localOffset === boundaryOffset) {\n            // If the next chord interval starts at boundaryOffset, there is no chord interval which should be divided\n            needsDivision = false;\n            targetIndex = i; // first chord interval of the scale interval A\n            break;\n          } else if (nextChordInterval.localOffset > boundaryOffset) {\n            // If the next chord interval start after boundaryOffset, the current chord interval should be divided\n            needsDivision = true;\n            targetIndex = i;\n            break;\n          }\n        }\n      }\n\n      // Allocate (and modify) the chord intervals among the two scale intervals\n      for (let i = 0 ; i <= targetIndex-1 ; i++) {\n        newScaleIntervalA.chordIntervals.push(baseScaleInterval.chordIntervals[i]);\n      }\n      {\n        const targetChordInterval = baseScaleInterval.chordIntervals[targetIndex];\n        if (needsDivision) {\n          const [newChordIntervalA, newChordIntervalB] = this.divideChordInterval(\n            baseScaleInterval.chordIntervals[targetIndex],\n            boundaryOffset - targetChordInterval.localOffset, // Calcurate inner boundaryOffset for the target chord interval\n            targetChordInterval.chord,\n            targetChordInterval.chord,\n          );\n          newChordIntervalB.localOffset -= boundaryOffset; // Update the origin of localOffset to the scale interval B\n          newScaleIntervalA.chordIntervals.push(newChordIntervalA);\n          newScaleIntervalB.chordIntervals.push(newChordIntervalB);\n        } else {\n          // If no division is needed, targetIndex points to the first chord interval of the scale interval A\n          newScaleIntervalA.chordIntervals.push(targetChordInterval);\n        }\n      }\n      for (let i = targetIndex+1 ; i < baseScaleInterval.chordIntervals.length ; i++) {\n        baseScaleInterval.chordIntervals[i].localOffset -= boundaryOffset; // Update the origin of localOffset to the scale interval B\n        newScaleIntervalB.chordIntervals.push(baseScaleInterval.chordIntervals[i]);\n      }\n\n      return [newScaleIntervalA, newScaleIntervalB];\n    },\n    /**\n     * Divides the specified scale interval into the two intervals, A and B, based on the specified boundary.\n     * Splits the chord intervals as needed.\n     */\n    divideChordInterval(oldChordInterval, boundaryOffset, chordA, chordB) {\n      // console.log(`divideChordInterval`);\n      // console.log(`chord localOffset: ${oldChordInterval.localOffset} - chord duration: ${oldChordInterval.duration} - boundaryOffset: ${boundaryOffset}`);\n      const newChordIntervalA = {\n        id: Math.random(),\n        localOffset: oldChordInterval.localOffset,\n        duration: boundaryOffset, // Range: [0, boundaryOffset]\n        chord: chordA,\n        notes: [], // to be assigned\n      };\n      const newChordIntervalB = {\n        id: Math.random(),\n        localOffset: oldChordInterval.localOffset + boundaryOffset,\n        duration: oldChordInterval.duration - boundaryOffset, // Range: [boundaryOffset, duration]\n        chord: chordB,\n        notes: [], // to be assigned\n      };\n\n      // Allocate (and modify) the notes among the two chord intervals\n      for (let i = 0 ; i < oldChordInterval.notes.length ; i++) {\n        const note = oldChordInterval.notes[i];\n        if (note.localOffset < boundaryOffset) {\n          newChordIntervalA.notes.push(note);\n        } else {\n          note.localOffset -= boundaryOffset;\n          newChordIntervalB.notes.push(note);\n        }\n      }\n\n      return [newChordIntervalA, newChordIntervalB];\n    },\n    startMidiInputConfiguration() {\n      // Show alert dialog if it is a first attempt to get MIDI access\n      if (this.midiAccess == null && !window.confirm('All Input/Output MIDI devices will be locked after configuring input MIDI devices. Are you sure?')) {\n        return;\n      }\n\n      // show static modal\n      this.$modal.show('midi-input-configuration');\n\n      // requestMIDIAccess\n      if (this.midiAccess == null) {\n        setTimeout(() => {\n          navigator.requestMIDIAccess({ sysex: false, software: false })\n          .then((ma) => {\n            console.log(ma);\n            this.midiAccess = ma;\n            this.midiAccess.onstatechange = (e) => {\n              console.log(e);\n              console.log('MIDI access state is changed. Updating MIDI inputs/outputs array...');\n              this.midiInputs = Array.from(ma.inputs.values());\n              this.midiOutputs = Array.from(ma.outputs.values());\n            };\n\n            console.log('MIDI access is established. Updating MIDI inputs/outputs array...');\n\n            this.midiInputs = Array.from(ma.inputs.values());\n            this.midiOutputs = Array.from(ma.outputs.values());\n            console.log(this.midiInputs);\n            console.log(this.midiOutputs);\n          })\n          .catch((e) => {\n            console.error('Failed to get MIDI access.');\n            throw e;\n          })\n          .then(() => { // = finally\n          });\n        }, 500);\n      }\n    },\n    disconnectMidiInput() {\n      if (window.confirm('You need to reload the page to disconnect MIDI devices and make them available for other DAW applications. Are you sure?')) {\n        location.reload();\n      }\n    },\n    onMidiInputChannelToggled(input, channel, checked) {\n      console.log(`${input}, ${channel}, ${checked}`);\n      const targetMidiInput = this.selectedMidiInputs.find(v => v.ref === input);\n\n      if (targetMidiInput == null) {\n        if (checked) {\n          // Add new entry\n          const newVal = {\n            ref: input,\n            channels: [channel],\n            midiMessageListener: (event) => {\n              console.log(`[${input.name}]`);\n              let str = \"MIDI message received at timestamp \" + event.timestamp + \"[\" + event.data.length + \" bytes]: \";\n\n              // Ignore MIDI events from not selected channels\n              if (false) {\n                return;\n              }\n\n              for (let i=0; i<event.data.length; i++) {\n                str += \"0x\" + event.data[i].toString(16) + \" \";\n              }\n              console.log( str );\n\n              switch (event.data[0]) {\n                case 0x80: { // Note Off\n                  const note = event.data[1] + this.transposeDistance();\n                  if (note < 0 || note > 127) { break; }\n                  this.isNoteOn[note] = false;\n                  MIDI.noteOff(0, note, 0);\n                  break;\n                }\n                case 0x90: { // Note On\n                  const note = event.data[1] + this.transposeDistance();\n                  if (note < 0 || note > 127) { break; }\n                  this.isNoteOn[note] = true;\n                  MIDI.noteOn(0, note, 100, 0);\n                  break;\n                }\n                default:\n                  console.error(`Unsupported MIDI message type: ${event.data[0]}`);\n              }\n              console.log(this.isNoteOn);\n              //this.rerender();\n            },\n          };\n          this.selectedMidiInputs.push(newVal);\n\n          input.onmidimessage = newVal.midiMessageListener; // Start listening\n        }\n      } else {\n        if (checked) {\n          // Add channel\n          targetMidiInput.channels.push(channel);\n        } else {\n          // Remove channel\n          targetMidiInput.channels.splice(targetMidiInput.channels.findIndex(v => v === channel), 1);\n\n          // Remove entry\n          if (targetMidiInput.channels.length === 0) {\n            targetMidiInput.ref.onmidimessage = null; // Stop listening to MIDI messages to this MIDI input\n            this.selectedMidiInputs.splice(this.selectedMidiInputs.findIndex(v => v === targetMidiInput), 1);\n          }\n        }\n      }\n    },\n  },\n  components: {\n    'pitch-row': {\n      template: `\n        <div :class=\"{\n          'pitch-row': true,\n          }\" :style=\"{\n          'position': 'relative',\n          'width': '100%',\n          'height': '100%',\n          'transform-style': 'preserve-3d',\n          }\">\n          <!-- Mouse down detector -->\n          <div :style=\"{\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': '0',\n                  'width': '100%',\n                  'height': '100%',\n                }\"\n                @mousedown=\"onMouseDown\">\n          </div>\n          <!-- Notes -->\n          <note v-for=\"note in chordInterval.notes\" :key=\"note.id\" v-if=\"note.pitch == pitch\" :scale-interval=\"scaleInterval\" :chord-interval=\"chordInterval\" :note=\"note\" :selected-notes=\"selectedNotes\"\n            :class=\"{\n              'selected': selectedNotes.includes(note),\n            }\"\n            :style=\"{\n              'position': 'absolute',\n              'top': '0',\n              'left': ((note.localOffset / 1920.0) * global.barWidth) + 'px',\n              'width': ((note.duration / 1920.0) * global.barWidth) + 'px',\n              'height': '100%',\n          }\" />\n          <!-- Input indicator -->\n          <note :scale-interval=\"scaleInterval\" :chord-interval=\"chordInterval\" :note=\"{pitch: pitch}\"\n            :style=\"{\n              'position': 'absolute',\n              'top': '0',\n              'left': ((newNoteLocalOffset / 1920.0) * global.barWidth) + 'px',\n              'width': ((newNoteDuration / 1920.0) * global.barWidth) + 'px',\n              'height': '100%',\n              'display': inputting ? 'flex !important' : 'none !important',\n              'background-color': 'white !important',\n              'color': 'black !important',\n          }\" />\n          </div>\n        </div>\n      `,\n      data() {\n        return {\n          global: global,\n          notesPane: null, // to be assigned\n          inputting: false,\n          newNoteLocalOffset: null,\n          newNoteDuration: null,\n        };\n      },\n      props: ['scaleInterval', 'chordInterval', 'pitch', 'selectedNotes'],\n      methods: {\n        onMouseDown: function ($event) {\n          this.inputting = true;\n          MIDI.noteOn(0, this.pitch, 100, 0);\n\n          const updateNewNoteDuration = (eventPageX) => {\n            this.newNoteDuration = Math.round(((((this.notesPane.scrollLeft + eventPageX) - getPageXY(this.$el).x)+1) / this.$el.offsetWidth) * this.chordInterval.duration) - this.newNoteLocalOffset;\n            // console.log(this.newNoteDuration);\n            if (this.newNoteDuration < (true ? global.granularity : 0)) { // Lower boundary clipping\n              this.newNoteDuration = (true ? global.granularity : 0);\n            }\n            // console.log(this.newNoteDuration);\n            if (true) { // Align the duration based on the granularity\n              if ((this.newNoteDuration % global.granularity) !== 0) {\n                this.newNoteDuration = this.newNoteDuration - (this.newNoteDuration % global.granularity) + global.granularity;\n              }\n            }\n            // console.log(this.newNoteDuration);\n          };\n          this.newNoteLocalOffset = Math.round((((this.notesPane.scrollLeft + $event.pageX) - getPageXY(this.$el).x) / this.$el.offsetWidth) * this.chordInterval.duration);\n          // console.log(this.newNoteLocalOffset);\n          if (true) { // Align the local offset based on the granularity\n            this.newNoteLocalOffset = this.newNoteLocalOffset - (this.newNoteLocalOffset % global.granularity);\n          }\n          // console.log(this.newNoteLocalOffset);\n          updateNewNoteDuration($event.pageX);\n\n          let onMouseMove;\n          let onMouseUp;\n          onMouseMove = (event) => {\n            // console.log('mousemove');\n            // console.log(event.pageX);\n            // console.log(getPageXY(this.$el).x);\n            updateNewNoteDuration(event.pageX);\n          };\n          onMouseUp = (event) => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('mouseup', onMouseUp);\n            MIDI.noteOff(0, this.pitch, 0);\n\n            this.$emit('new-note', this.chordInterval, this.newNoteLocalOffset, this.newNoteDuration, this.pitch);\n            this.inputting = false;\n            this.newNoteLocalOffset = null;\n            this.newNoteDuration = null;\n          };\n          window.addEventListener('mousemove', onMouseMove);\n          window.addEventListener('mouseup', onMouseUp);\n        },\n      },\n      mounted() {\n        try {\n          this.notesPane = this.$parent.$refs.notesPane || this.$parent.$parent.$refs.notesPane || this.$parent.$parent.$parent.$refs.notesPane;\n        } catch (e) {\n          console.error('Notes pane is not found!');\n          throw e;\n        }\n      },\n      components: {\n        'note': {\n          template: `\n            <div class=\"note\"\n                  :style=\"{\n                  'display': 'flex',\n                  'align-items': 'center',\n                  'white-space': 'nowrap',\n                  'box-sizing': 'border-box',\n                  'border': ((this.scaleInterval.scale == null ? false : (this.chordInterval.chord == null ? false : this.note.pitch % 12 === this.chordInterval.chord[0])) ? '1px white solid' : '1px black solid'),\n                  'padding-left': '4px',\n                  'font-size': '10px',\n                  'overflow': 'hidden',\n                  'text-align': 'left',\n              }\"\n              @mousedown=\"onMouseDown\"\n            >\n              <template v-if=\"scaleInterval.scale != null\">\n                <template v-if=\"chordInterval.chord != null\">\n              <template v-if=\"chordInterval.chord[0] !== note.pitch % 12\"><!-- Show the degree label if it is a root tone -->\n                {{global.getIntervalsFromRoot(scaleInterval.scale, chordInterval.chord[0], note.pitch % 12).join(' or ')}}\n              </template>\n              <template v-else>\n                  {{global.getDegreeLabels(scaleInterval.scale, note.pitch % 12).join(' or ')}}\n                </template>\n            </template>\n                <template v-else>\n                  {{global.getDegreeLabels(scaleInterval.scale, note.pitch % 12).join(' or ')}}\n                </template>\n              </template>\n              <template v-else>\n                {{global.getNoteNames(note.pitch % 12).join(' or ')}}\n              </template>\n            </div>\n          `,\n          data() {\n            return {\n              global: global,\n            };\n          },\n          props: ['scaleInterval', 'chordInterval', 'note', 'selectedNotes'],\n          methods: {\n            onMouseDown: function($event) {\n              MIDI.noteOn(0, this.note.pitch, 100, 0);\n              if (!$event.shiftKey) {\n                this.selectedNotes.length = 0;\n              }\n              this.selectedNotes.push(this.note);\n\n              let onMouseUp;\n              onMouseUp = (event) => {\n                window.removeEventListener('mouseup', onMouseUp);\n                MIDI.noteOff(0, this.note.pitch, 0);\n              };\n              window.addEventListener('mouseup', onMouseUp);\n            },\n          },\n        },\n      },\n    },\n    'scale-interval-indicator': {\n      template: `\n        <!-- Wrapper -->\n        <div :style=\"{\n                'position': 'relative',\n                'width': ((scaleInterval.duration / 1920.0) * global.barWidth) + 'px',\n                'height': '100%',\n              }\">\n          <!-- Mouse down detector -->\n          <div :style=\"{\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': '0',\n                  'width': '100%',\n                  'height': '24px',\n                }\"\n                @mousedown=\"onMouseDown\">\n          </div>\n          <!-- Indicator -->\n          <div v-show=\"scaleInterval.scale != null\"\n               :style=\"{\n                  'display': 'flex',\n                  'align-items': 'center',\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': '0',\n                  'box-sizing': 'border-box',\n                  'padding-left': '6px',\n                  'width': '100%',\n                  'height': '24px',\n                  'background-color': 'white',\n                  'box-shadow': 'inset 0 0 2px black',\n                  'font-size': '14px',\n                  'font-weight': 'bold',\n                }\"\n                @wheel=\"onWheel\">\n            <template v-if=\"scaleInterval.scale != null\">\n              {{global.getScaleNames(scaleInterval.scale).join(' / ')}}\n            </template>\n          </div>\n          <!-- Input indicator -->\n          <div v-show=\"inputting\"\n               :style=\"{\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': ((newIntervalLocalOffset / 1920.0) * global.barWidth) + 'px',\n                  'width': ((newIntervalDuration / 1920.0) * global.barWidth) + 'px',\n                  'height': '24px',\n                  'background-color': 'white',\n                  'box-shadow': 'inset 0 0 2px black',\n                  'pointer-events': 'none',\n                  }\">\n          </div>\n          <!-- Child chord intervals -->\n          <template v-for=\"chd in scaleInterval.chordIntervals\">\n            <div :style=\"{\n                    'position': 'absolute',\n                    'top': '24px',\n                    'left': ((chd.localOffset / 1920.0) * global.barWidth) + 'px',\n                    'width': ((chd.duration / 1920.0) * global.barWidth) + 'px',\n                    'height': '24px',\n                  }\">\n              <chord-interval-indicator :scaleInterval=\"scaleInterval\" :chordInterval=\"chd\" @new-chord-interval=\"onNewChordInterval\" />\n            </div>\n          </template>\n        </div>\n      `,\n      data() {\n        return {\n          global: global,\n          headerPane: null, // to be assigned\n          inputting: false,\n          newIntervalLocalOffset: null,\n          newIntervalDuration: null,\n        };\n      },\n      props: ['scaleInterval'],\n      methods: {\n        onNewChordInterval(...args) {\n          this.$emit.apply(this, ['new-chord-interval', ...args]); // Redirect\n        },\n        onMouseDown: function ($event) {\n          if (this.scaleInterval.scale != null) { return; } // Able to add a new scale interval only if this scale interval is empty\n\n          // console.log('mousedown');\n          // console.log(this.headerPane.scrollLeft);\n          // console.log($event.pageX);\n          // console.log(getPageXY(this.$el).x);\n          this.inputting = true;\n\n          const updateNewIntervalDuration = (eventPageX) => {\n            this.newIntervalDuration = Math.round(((((this.headerPane.scrollLeft + eventPageX) - getPageXY(this.$el).x)+1) / this.$el.offsetWidth) * this.scaleInterval.duration) - this.newIntervalLocalOffset;\n            // console.log(this.newIntervalDuration);\n            if (this.newIntervalDuration < (true ? global.granularity : 0)) { // Lower boundary clipping\n              this.newIntervalDuration = (true ? global.granularity : 0);\n            } else if (this.newIntervalLocalOffset + this.newIntervalDuration > this.scaleInterval.duration) { // Higher boundary clipping\n              this.newIntervalDuration = this.scaleInterval.duration - this.newIntervalLocalOffset;\n            }\n            // console.log(this.newIntervalDuration);\n            if (true) { // Align the duration based on the granularity\n              if ((this.newIntervalDuration % global.granularity) !== 0) {\n                this.newIntervalDuration = this.newIntervalDuration - (this.newIntervalDuration % global.granularity) + global.granularity;\n              }\n            }\n            // console.log(this.newIntervalDuration);\n          };\n          this.newIntervalLocalOffset = Math.round((((this.headerPane.scrollLeft + $event.pageX) - getPageXY(this.$el).x) / this.$el.offsetWidth) * this.scaleInterval.duration);\n          // console.log(this.newIntervalLocalOffset);\n          if (true) { // Align the local offset based on the granularity\n            this.newIntervalLocalOffset = this.newIntervalLocalOffset - (this.newIntervalLocalOffset % global.granularity);\n          }\n          // console.log(this.newIntervalLocalOffset);\n          updateNewIntervalDuration($event.pageX);\n\n          // console.log(this.newIntervalLocalOffset);\n          // console.log(this.newIntervalDuration);\n\n          let onMouseMove;\n          let onMouseUp;\n          onMouseMove = (event) => {\n            // console.log('mousemove');\n            // console.log(event.pageX);\n            // console.log(getPageXY(this.$el).x);\n            updateNewIntervalDuration(event.pageX);\n          };\n          onMouseUp = (event) => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('mouseup', onMouseUp);\n\n            this.$emit('new-scale-interval', this.scaleInterval, this.newIntervalLocalOffset, this.newIntervalDuration);\n            this.inputting = false;\n            this.newIntervalLocalOffset = null;\n            this.newIntervalDuration = null;\n          };\n          window.addEventListener('mousemove', onMouseMove);\n          window.addEventListener('mouseup', onMouseUp);\n        },\n        onWheel: function ($event) {\n          if ($event.deltaY > 0) {\n            this.scaleInterval.scale = this.scaleInterval.scale.map(v => (v+11) % 12);\n          } else if ($event.deltaY < 0) {\n            this.scaleInterval.scale = this.scaleInterval.scale.map(v => (v+1) % 12);\n          } else {\n            return; // Horizontal wheel input is not supported\n          }\n          (this.$parent.rerender || this.$parent.$parent.rerender || this.$parent.$parent.$parent.rerender)();\n        },\n      },\n      beforeCreate() {\n        console.log(`C major - 127 - 123`);\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11], 127));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11], 126));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11], 125));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11], 124));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11], 123));\n        console.log(`C-6 major - 127 - 123`);\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11].map(v=>(v+6)%12), 127));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11].map(v=>(v+6)%12), 126));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11].map(v=>(v+6)%12), 125));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11].map(v=>(v+6)%12), 124));\n        console.log(global.getPositionInCollapseMode([0, 2, 4, 5, 7, 9, 11].map(v=>(v+6)%12), 123));\n      },\n      mounted() {\n        try {\n          // Note: :header-pane=\"$refs.headerPane\" did not work\n          this.headerPane = this.$parent.$refs.headerPane || this.$parent.$parent.$refs.headerPane || this.$parent.$parent.$parent.$refs.headerPane;\n        } catch (e) {\n          console.error('Header pane is not found!');\n          throw e;\n        }\n      },\n      components: {\n        'chord-interval-indicator': {\n          template: `\n            <!-- Wrapper -->\n            <div :style=\"{\n                    'position': 'relative',\n                    'width': '100%',\n                    'height': '100%',\n                  }\">\n              <!-- Mouse down detector -->\n              <div :style=\"{\n                      'position': 'absolute',\n                      'top': '0',\n                      'left': '0',\n                      'width': '100%',\n                      'height': '100%',\n                    }\"\n                    @mousedown=\"onMouseDown\">\n              </div>\n              <!-- Indicator -->\n              <div v-show=\"chordInterval.chord != null\"\n                  :style=\"{\n                      'display': 'flex',\n                      'align-items': 'center',\n                      'position': 'absolute',\n                      'top': '0',\n                      'left': '0',\n                      'box-sizing': 'border-box',\n                      'padding-left': '6px',\n                      'width': '100%',\n                      'height': '100%',\n                      'background-color': 'white',\n                      'box-shadow': 'inset 0 0 2px black',\n                      'font-size': '14px',\n                      'font-weight': 'bold',\n                    }\"\n                    @wheel=\"onWheel\">\n                {{chordInterval.chord === void 0 ? 'undefined' : JSON.stringify(chordInterval.chord)}}\n              </div>\n              <!-- Input indicator -->\n              <div v-show=\"inputting\"\n                  :style=\"{\n                      'position': 'absolute',\n                      'top': '0',\n                      'left': ((newIntervalLocalOffset / 1920.0) * global.barWidth) + 'px',\n                      'width': ((newIntervalDuration / 1920.0) * global.barWidth) + 'px',\n                      'height': '100%',\n                      'background-color': 'white',\n                      'box-shadow': 'inset 0 0 2px black',\n                      'pointer-events': 'none',\n                      }\">\n              </div>\n            </div>\n          `,\n          data() {\n            return {\n              global: global,\n              headerPane: null, // to be assigned\n              inputting: false,\n              newIntervalLocalOffset: null,\n              newIntervalDuration: null,\n            };\n          },\n          props: ['scaleInterval', 'chordInterval'],\n          methods: {\n            onMouseDown: function ($event) {\n              if (this.chordInterval.chord != null) { return; } // Able to add a new chord interval only if this chord interval is empty\n\n              this.inputting = true;\n\n              const updateNewIntervalDuration = (eventPageX) => {\n                this.newIntervalDuration = Math.round(((((this.headerPane.scrollLeft + eventPageX) - getPageXY(this.$el).x)+1) / this.$el.offsetWidth) * this.chordInterval.duration) - this.newIntervalLocalOffset;\n                // console.log(this.newIntervalDuration);\n                if (this.newIntervalDuration < (true ? global.granularity : 0)) { // Lower boundary clipping\n                  this.newIntervalDuration = (true ? global.granularity : 0);\n                } else if (this.newIntervalLocalOffset + this.newIntervalDuration > this.chordInterval.duration) { // Higher boundary clipping\n                  this.newIntervalDuration = this.chordInterval.duration - this.newIntervalLocalOffset;\n                }\n                // console.log(this.newIntervalDuration);\n                if (true) { // Align the duration based on the granularity\n                  if ((this.newIntervalDuration % global.granularity) !== 0) {\n                    this.newIntervalDuration = this.newIntervalDuration - (this.newIntervalDuration % global.granularity) + global.granularity;\n                  }\n                }\n                // console.log(this.newIntervalDuration);\n              };\n              this.newIntervalLocalOffset = Math.round((((this.headerPane.scrollLeft + $event.pageX) - getPageXY(this.$el).x) / this.$el.offsetWidth) * this.chordInterval.duration);\n              // console.log(this.newIntervalLocalOffset);\n              if (true) { // Align the local offset based on the granularity\n                this.newIntervalLocalOffset = this.newIntervalLocalOffset - (this.newIntervalLocalOffset % global.granularity);\n              }\n              // console.log(this.newIntervalLocalOffset);\n              updateNewIntervalDuration($event.pageX);\n\n              // console.log(this.newIntervalLocalOffset);\n              // console.log(this.newIntervalDuration);\n\n              let onMouseMove;\n              let onMouseUp;\n              onMouseMove = (event) => {\n                // console.log('mousemove');\n                // console.log(event.pageX);\n                // console.log(getPageXY(this.$el).x);\n                updateNewIntervalDuration(event.pageX);\n              };\n              onMouseUp = (event) => {\n                window.removeEventListener('mousemove', onMouseMove);\n                window.removeEventListener('mouseup', onMouseUp);\n\n                this.$emit('new-chord-interval', this.scaleInterval, this.chordInterval, this.newIntervalLocalOffset, this.newIntervalDuration);\n                this.inputting = false;\n                this.newIntervalLocalOffset = null;\n                this.newIntervalDuration = null;\n              };\n              window.addEventListener('mousemove', onMouseMove);\n              window.addEventListener('mouseup', onMouseUp);\n            },\n            onWheel: function ($event) {\n              if ($event.deltaY > 0) {\n                this.chordInterval.chord[0] = (this.chordInterval.chord[0]+11) % 12;\n              } else if ($event.deltaY < 0) {\n                this.chordInterval.chord[0] = (this.chordInterval.chord[0]+1) % 12;\n              } else {\n                return; // Horizontal wheel input is not supported\n              }\n              // Remove duplicate root tone\n              this.chordInterval.chord = this.chordInterval.chord.filter((v, i, a) => {\n                if (i === 0) { return true; } // [0] is always a root tone, unremovable\n                if (v === a[0]) { return false; } // Remove another root tone if it is found\n                return true;\n              });\n\n              (this.$parent.rerender || this.$parent.$parent.rerender || this.$parent.$parent.$parent.rerender)();\n            },\n          },\n          mounted() {\n            try {\n              this.headerPane = this.$parent.$parent.$refs.headerPane || this.$parent.$parent.$parent.$refs.headerPane || this.$parent.$parent.$parent.$parent.$refs.headerPane;\n            } catch (e) {\n              console.error('Header pane is not found!');\n              throw e;\n            }\n          },\n        },\n      },\n    },\n  },\n  beforeCreate() {\n    MIDI.loadPlugin({\n        soundfontUrl: \"static/vendor/MIDI.js/examples/soundfont/\",\n        instrument: \"acoustic_grand_piano\",\n        onsuccess: function() {\n          MIDI.setVolume(0, 127);\n        },\n    });\n  },\n};\n</script>\n\n<style lang=\"scss\">\n  @import './App.scss';\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{\n    'flag-collapse': _vm.flagCollapse,\n  },staticStyle:{\"width\":\"100%\",\"height\":\"100%\",\"background-color\":\"rgb(28, 28, 28)\",\"display\":\"flex\",\"flex-flow\":\"column nowrap\"},attrs:{\"id\":\"app\"},on:{\"dragover\":function($event){_vm.onDragOver($event)},\"drop\":function($event){_vm.onDrop($event)},\"wheel\":_vm.onWheel}},[_vm._m(0),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"32px\",\"position\":\"relative\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"background-color\":\"rgb(94, 101, 108)\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\"}},[_c('div',{staticStyle:{\"flex\":\"1\",\"width\":\"0\",\"background-color\":\"transparent\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"align-items\":\"center\",\"color\":\"white\",\"font-size\":\"12px\"}},[_c('span',{staticStyle:{\"display\":\"inline-block\",\"width\":\"10px\"}}),_vm._v(\" \"),_c('span',{staticStyle:{\"display\":\"inline-block\"}},[_vm._v(\"MIDI Input:\")]),_vm._v(\" \"),_c('span',{staticStyle:{\"display\":\"inline-block\",\"width\":\"10px\"}}),_vm._v(\" \"),(_vm.midiAccess != null)?[(_vm.selectedMidiInputs != null && _vm.selectedMidiInputs.length > 0)?[_vm._l((_vm.selectedMidiInputs),function(input){return [_vm._v(\"\\n              \"+_vm._s(input.ref.name)+\"\\n              (\"+_vm._s(input.channels.map(function (v) { return (\"CH\" + v); }).join(', '))+\")\\n            \")]})]:[_vm._v(\"\\n            <Connected (No device is selected)>\\n          \")]]:[_vm._v(\"\\n          <Not connected>\\n        \")],_vm._v(\" \"),_c('span',{staticStyle:{\"display\":\"inline-block\",\"width\":\"10px\"}}),_vm._v(\" \"),_c('span',{staticStyle:{\"display\":\"inline-block\",\"height\":\"20px\",\"padding\":\"0 4px\",\"background-color\":\"rgba(255, 255, 255, 0.3)\"},on:{\"click\":_vm.startMidiInputConfiguration}},[_c('div',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"align-items\":\"center\"}},[_vm._v(\"\\n            Configure\\n          \")])]),_vm._v(\" \"),(_vm.midiAccess != null)?[_c('span',{staticStyle:{\"display\":\"inline-block\",\"width\":\"10px\"}}),_vm._v(\" \"),_c('span',{staticStyle:{\"display\":\"inline-block\",\"height\":\"20px\",\"padding\":\"0 4px\",\"background-color\":\"rgba(255, 255, 255, 0.3)\"},on:{\"click\":_vm.disconnectMidiInput}},[_c('div',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"align-items\":\"center\"}},[_vm._v(\"\\n              Disconnect\\n            \")])])]:_vm._e(),_vm._v(\"\\n        \"+_vm._s(_vm.playingScale())+\"\\n      \")],2)]),_vm._v(\" \"),_c('div',{staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"background-image\":\"linear-gradient(to top, black 0px, black 1px, transparent 1px, transparent 100%)\",\"pointer-events\":\"none\"}})]),_vm._v(\" \"),_c('div',{staticStyle:{\"flex\":\"1\",\"height\":\"0\",\"margin\":\"2px\",\"border\":\"1px solid black\",\"display\":\"flex\",\"flex-flow\":\"column nowrap\"},attrs:{\"tabindex\":\"0\"},on:{\"keyup\":[function($event){if(!('button' in $event)&&$event.keyCode!==8){ return null; }_vm.onBackSpace($event)},function($event){if(!('button' in $event)&&$event.keyCode!==46){ return null; }_vm.onDelete($event)}]}},[_vm._m(1),_vm._v(\" \"),_c('div',{staticStyle:{\"flex\":\"1\",\"height\":\"0\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\"}},[_vm._m(2),_vm._v(\" \"),_c('div',{staticStyle:{\"flex\":\"1\",\"width\":\"0\",\"background-color\":\"rgb(29, 30, 32)\",\"display\":\"flex\",\"flex-flow\":\"column nowrap\"}},[_c('div',{staticStyle:{\"height\":\"81px\"}},[_c('div',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\"}},[_c('div',{staticStyle:{\"width\":\"64px\",\"background-color\":\"rgb(39, 42, 45)\"}},[_c('button',{on:{\"click\":function($event){_vm.flagCollapse = !_vm.flagCollapse}}},[_vm._v(_vm._s(_vm.flagCollapse))])]),_vm._v(\" \"),_c('div',{ref:\"headerPane\",staticClass:\"no-scrollbar-holizontal\",staticStyle:{\"margin-right\":\"17px\",\"flex\":\"1\",\"overflow\":\"scroll\",\"background-color\":\"blue\"},on:{\"scroll\":function($event){_vm.onScroll_headerPane($event)}}},[_c('div',{style:({\n                  'display': 'flex',\n                  'flex-flow': 'column nowrap',\n                  'width': ((_vm.totalDuration / 1920.0) * _vm.global.barWidth) + 'px',\n                  'background-color': 'rgb(42, 45, 49)',\n                  'height': '80px',\n                  'border-bottom': '1px rgb(31, 33, 36) solid',\n                  })},[_c('div',{style:({\n                    'position': 'relative',\n                    'width': '100%',\n                    'height': '32px',\n                    }),on:{\"mouseup\":_vm.onMouseUp_BeatsBar}},[_c('div',{style:({\n                    'position': 'absolute',\n                    'bottom': '1px',\n                    'left': '0px',\n                    'width': '100%',\n                    'height': '1px',\n                    'background-color': \"black\",\n                    'pointer-events': \"none\",\n                  })}),_vm._v(\" \"),_c('div',{style:({\n                    'position': 'absolute',\n                    'bottom': '0px',\n                    'left': '0px',\n                    'width': '100%',\n                    'height': '1px',\n                    'background-color': \"rgb(38, 40, 43)\",\n                    'pointer-events': \"none\",\n                  })}),_vm._v(\" \"),_vm._l((_vm.divideDuration(_vm.totalDuration, 480)),function(beat){return _c('div',{key:beat.localOffset,style:({\n                    'position': 'absolute',\n                    'bottom': '1px',\n                    'left': ((beat.localOffset / 1920.0) * _vm.global.barWidth) + 'px',\n                    'width': '1px',\n                    'height': '4px',\n                    'background-color': \"white\",\n                    'pointer-events': \"none\",\n                  })})})],2),_vm._v(\" \"),_c('div',{style:({\n                    'position': 'relative',\n                    'width': '100%',\n                    'height': '48px',\n                    })},[_c('div',{style:({\n                      'position': 'absolute',\n                      'top': '0px',\n                      'left': '0px',\n                      'width': '100%',\n                      'height': '100%',\n                      })},_vm._l((_vm.divideDuration(_vm.totalDuration, 480)),function(beat){return _c('div',{key:beat.localOffset,style:({\n                      'position': 'absolute',\n                      'top': '0',\n                      'left': ((beat.localOffset / 1920.0) * _vm.global.barWidth) + 'px',\n                      'width': ((beat.duration / 1920.0) * _vm.global.barWidth) + 'px',\n                      'height': '100%',\n                      'background-image': \"linear-gradient(to right, rgb(61, 63, 65) 0, rgb(61, 63, 65) 1px, transparent 1px, transparent 100%)\",\n                      'pointer-events': \"none\",\n                    })})})),_vm._v(\" \"),_c('div',{style:({\n                      'position': 'absolute',\n                      'top': '0px',\n                      'left': '0px',\n                      'display': 'flex',\n                      'flex-flow': 'row nowrap',\n                      'width': '100%',\n                      'height': '100%',\n                      })},_vm._l((_vm.scaleIntervals),function(int){return _c('scale-interval-indicator',{key:int.id,attrs:{\"scale-interval\":int},on:{\"new-scale-interval\":_vm.onNewScaleInterval,\"new-chord-interval\":_vm.onNewChordInterval}})}))])])])])]),_vm._v(\" \"),_c('div',{staticStyle:{\"flex\":\"1\",\"height\":\"0\"}},[_c('div',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"background-color\":\"rgb(33, 35, 38)\"}},[_c('div',{staticStyle:{\"position\":\"relative\",\"margin-bottom\":\"17px\",\"width\":\"64px\",\"background-color\":\"green\"}},[_c('div',{ref:\"pitchesPane\",staticClass:\"no-scrollbar\",staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\"},on:{\"scroll\":function($event){_vm.onScroll_pitchesPane($event)}}},[_c('div',{style:({\n                    'width': '100%',\n                    'height': (_vm.pitches.length * _vm.pitchHeight) + 'px',\n                    'background-color': 'rgb(240, 242, 243)',\n                    })},_vm._l((_vm.pitches),function(pitch){return _c('div',{key:pitch,class:{\n                      'piano-key': true,\n                      'scale-tone': (\n                        [0, 2, 4, 5, 7, 9, 11].includes(pitch % 12)\n                        ),\n                      'non-scale-tone': !(\n                        [0, 2, 4, 5, 7, 9, 11].includes(pitch % 12)\n                        ),\n                      'note-on': _vm.isNoteOn[pitch],\n                    },style:({\n                    'height': _vm.pitchHeight + 'px',\n                    })})}))]),_vm._v(\" \"),_c('div',{staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"box-shadow\":\"inset 0px 0px 0px 1px rgb(24, 24, 24)\",\"pointer-events\":\"none\"}})]),_vm._v(\" \"),_c('div',{ref:\"notesPane\",staticStyle:{\"flex\":\"1\",\"overflow\":\"scroll\",\"background-color\":\"rgb(50, 53, 56)\"},on:{\"scroll\":function($event){_vm.onScroll_notesPane($event)}}},[_c('div',{style:({\n                  'display': 'flex',\n                  'flex-flow': 'row nowrap',\n                  'position': 'relative',\n                  'width': ((_vm.totalDuration / 1920.0) * _vm.global.barWidth) + 'px',\n                  'height': (_vm.pitches.length * _vm.pitchHeight) + 'px',\n                  })},[_vm._l((_vm.scaleIntervals),function(int){return _c('div',{key:int.id,style:({\n                  'display': 'flex',\n                  'flex-flow': 'row nowrap',\n                  'box-sizing': 'border-box',\n                  'width': ((int.duration / 1920.0) * _vm.global.barWidth) + 'px',\n                  'height': '100%',\n                  })},_vm._l((int.chordIntervals),function(chd){return _c('div',{key:chd.id,style:({\n                    'position': 'relative',\n                    'display': 'flex',\n                    'flex-flow': 'column nowrap',\n                    'width': ((chd.duration / 1920.0) * _vm.global.barWidth) + 'px',\n                    'height': '100%',\n                    })},[_vm._l((_vm.pitches),function(pitch){return _c('div',{key:pitch,class:{\n                      'pitch-row-wrapper': true,\n                      'scale-tone': (int.scale == null ? true : int.scale.includes(pitch % 12)),\n                      'non-scale-tone': (int.scale == null ? false : !int.scale.includes(pitch % 12)),\n                      'central-tone': (int.scale == null ? false : pitch % 12 === int.scale[0]),\n                      'root-tone': (int.scale == null ? false : (chd.chord == null ? false : pitch % 12 === chd.chord[0])),\n                      'note-on': _vm.isNoteOn[pitch],\n                      },style:({\n                      'position': 'absolute',\n                      'width': '100%',\n                      'height': _vm.pitchHeight + 'px',\n                      'transform': (\"translate(0, \" + (_vm.global.getPositionInCollapseMode((_vm.flagCollapse && int.scale) || [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], pitch) * _vm.pitchHeight) + \"px)\"),\n                      'transform-style': 'preserve-3d',\n                      })},[_c('pitch-row',{attrs:{\"scale-interval\":int,\"chord-interval\":chd,\"pitch\":pitch,\"selected-notes\":_vm.selectedNotes},on:{\"new-note\":_vm.onNewNote}})],1)}),_vm._v(\" \"),_vm._l((_vm.divideDuration(chd.duration, 480)),function(beat,index){return _c('div',{key:beat.localOffset,style:({\n                      'position': 'absolute',\n                      'top': '0',\n                      'left': ((beat.localOffset / 1920.0) * _vm.global.barWidth) + 'px',\n                      'width': ((beat.duration / 1920.0) * _vm.global.barWidth) + 'px',\n                      'height': '100%',\n                      'background-image': (\"linear-gradient(to right, \" + (int.scale == null ? 'transparent' : (index === 0 && chd.chord != null ? 'black' : 'transparent')) + \" 0, \" + (int.scale == null ? 'transparent' : (index === 0 && chd.chord != null ? 'black' : 'transparent')) + \" 1px, transparent 1px, transparent 100%)\"),\n                      'pointer-events': \"none\",\n                    })})})],2)}))}),_vm._v(\" \"),_vm._l((_vm.divideDuration(_vm.totalDuration, 480)),function(beat){return _c('div',{key:beat.localOffset,style:({\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': ((beat.localOffset / 1920.0) * _vm.global.barWidth) + 'px',\n                  'width': ((beat.duration / 1920.0) * _vm.global.barWidth) + 'px',\n                  'height': '100%',\n                  'background-image': \"linear-gradient(to right, rgb(61, 63, 65) 0, rgb(61, 63, 65) 1px, transparent 1px, transparent 100%)\",\n                  'pointer-events': \"none\",\n                })})}),_vm._v(\" \"),_c('div',{style:({\n                  'position': 'absolute',\n                  'top': '0',\n                  'left': ((_vm.playingOffset / 1920.0) * _vm.global.barWidth) + 'px',\n                  'width': '1px',\n                  'height': '100%',\n                  'background-color': \"rgba(255, 255, 255, 0.5)\",\n                  'pointer-events': \"none\",\n                })})],2)])])])])])]),_vm._v(\" \"),_c('modal',{attrs:{\"name\":\"midi-input-configuration\",\"height\":\"auto\"}},[_c('div',{staticStyle:{\"padding\":\"14px 16px\",\"font-size\":\"14px\"}},[(_vm.midiAccess != null)?[(_vm.midiInputs != null)?_vm._l((_vm.midiInputs),function(input,index){return _c('div',{key:input.name,style:({\n                 'margin-top': (index === 0 ? '0' : '12px'),\n               })},[_vm._v(\"\\n            \"+_vm._s(input.name)+\"\\n            \"),_vm._l(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]),function(ch){return _c('div',{key:ch,staticStyle:{\"margin-left\":\"16px\"}},[_c('input',{attrs:{\"type\":\"checkbox\"},on:{\"change\":function($event){_vm.onMidiInputChannelToggled(input, ch, $event.target.checked)}}}),_vm._v(\"\\n              CH\"+_vm._s(ch)+\"\\n            \")])})],2)}):[_c('div',[_vm._v(\"MIDI inputs are not available!\")])]]:_vm._e()],2)])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"height\":\"32px\",\"position\":\"relative\"}},[_c('div',{staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"background-color\":\"rgb(58, 58, 58)\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\"}},[_c('div',{staticStyle:{\"width\":\"100px\",\"background-color\":\"rgb(40, 40, 40)\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"flex\":\"1\",\"width\":\"0\",\"background-color\":\"transparent\"}})]),_vm._v(\" \"),_c('div',{staticStyle:{\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"right\":\"0\",\"bottom\":\"0\",\"left\":\"0\",\"background-image\":\"linear-gradient(to top, black 0px, black 1px, transparent 1px, transparent 100%)\",\"pointer-events\":\"none\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"height\":\"36px\",\"background-color\":\"rgb(94, 101, 108)\",\"border-bottom\":\"1px solid black\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\"}},[_c('div',{staticStyle:{\"height\":\"24px\",\"width\":\"159px\",\"background-color\":\"transparent\"}}),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100%\",\"width\":\"32px\",\"background-color\":\"rgb(63, 140, 191)\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"align-items\":\"center\",\"justify-content\":\"center\",\"font-size\":\"7px\",\"color\":\"white\"}},[_vm._v(\"\\n        Select\\n      \")]),_vm._v(\" \"),_c('div',{staticStyle:{\"height\":\"100%\",\"width\":\"32px\",\"background-color\":\"rgb(94, 101, 108)\",\"display\":\"flex\",\"flex-flow\":\"row nowrap\",\"align-items\":\"center\",\"justify-content\":\"center\",\"font-size\":\"7px\",\"color\":\"white\"}},[_vm._v(\"\\n        Edit\\n      \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"width\":\"192px\",\"background-color\":\"rgb(29, 30, 32)\",\"display\":\"flex\",\"flex-flow\":\"column nowrap\"}},[_c('div',{staticStyle:{\"flex\":\"1\",\"height\":\"0\",\"background-color\":\"rgb(94, 101, 108)\",\"margin-right\":\"1px\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-09bf4dc6\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-09bf4dc6\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-09bf4dc6\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue';\nimport VModal from 'vue-js-modal';\n\nimport App from './App';\n\nVue.config.productionTip = false;\n\nVue.use(VModal);\n\n// Check for the various File API support.\nif (window.File && window.FileReader && window.FileList && window.Blob) {\n  // Great success! All the File APIs are supported.\n\n  /* eslint-disable no-new */\n  new Vue({\n    el: '#app',\n    template: '<App/>',\n    components: { App },\n  });\n} else {\n  alert('The File APIs are not fully supported in this browser.');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}